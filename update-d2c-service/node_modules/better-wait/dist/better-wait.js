"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.wait = void 0;
const ms_1 = __importDefault(require("ms"));
/**
 * Waits for specified `duration` resolving or rejecting based on options
 * @param duration number of milliseconds or a string in `ms` format
 * @param options promise resolution options
 * @returns specified returnValue or wait delay in milliseconds
 */
const wait = async (duration, options = {}) => {
    const delay = getDelayInMillis(duration);
    if (delay < 0 || delay > 2147483647) {
        throw new RangeError(`duration must be in a range [0-2147483647].`);
    }
    return new Promise((resolve, reject) => {
        const run = () => {
            const done = options.reject ? reject : resolve;
            return done(('returnValue' in options ? options.returnValue : delay));
        };
        // if delay is 0 return on next tick
        return delay === 0 ? run() : setTimeout(() => run(), delay);
    });
};
exports.wait = wait;
function getDelayInMillis(duration) {
    if (typeof duration === 'number') {
        return duration;
    }
    const delay = (0, ms_1.default)(duration);
    if (delay === undefined) {
        throw new TypeError(`[${duration}] is not a valid time format, navigate docs for format help - https://www.npmjs.com/package/ms.`);
    }
    return delay;
}
//# sourceMappingURL=better-wait.js.map