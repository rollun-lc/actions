"use strict";Object.defineProperty(exports,"__esModule",{value:true});exports["default"]=void 0;var _Token=require("../../../Token");function _classCallCheck(instance,Constructor){if(!(instance instanceof Constructor)){throw new TypeError("Cannot call a class as a function")}}function _defineProperties(target,props){for(var i=0;i<props.length;i++){var descriptor=props[i];descriptor.enumerable=descriptor.enumerable||false;descriptor.configurable=true;if("value"in descriptor)descriptor.writable=true;Object.defineProperty(target,descriptor.key,descriptor)}}function _createClass(Constructor,protoProps,staticProps){if(protoProps)_defineProperties(Constructor.prototype,protoProps);if(staticProps)_defineProperties(Constructor,staticProps);return Constructor}function _defineProperty(obj,key,value){if(key in obj){Object.defineProperty(obj,key,{value:value,enumerable:true,configurable:true,writable:true})}else{obj[key]=value}return obj}var AbstractLogicalOperatorNodeParser=function(){function AbstractLogicalOperatorNodeParser(conditionParser){_classCallCheck(this,AbstractLogicalOperatorNodeParser);_defineProperty(this,"conditionParser",void 0);this.conditionParser=conditionParser}_createClass(AbstractLogicalOperatorNodeParser,[{key:"parse",value:function parse(tokenStream){tokenStream.expect(_Token.TokenTypeNameMap.T_OPERATOR,this.getOperatorName());tokenStream.expect(_Token.TokenTypeNameMap.T_OPEN_PARENTHESIS);var queries=[];do{queries.push(this.conditionParser.parse(tokenStream))}while(tokenStream.nextIf(_Token.TokenTypeNameMap.T_COMMA)!==null);tokenStream.expect(_Token.TokenTypeNameMap.T_CLOSE_PARENTHESIS);return this.createNode(queries)}},{key:"supports",value:function supports(tokenStream){return tokenStream.test(_Token.TokenTypeNameMap.T_OPERATOR,this.getOperatorName())}}]);return AbstractLogicalOperatorNodeParser}();exports["default"]=AbstractLogicalOperatorNodeParser;