export declare enum TokenTypeNameMap {
    T_END = "T_END",
    T_INTEGER = "T_INTEGER",
    T_FLOAT = "T_FLOAT",
    T_STRING = "T_STRING",
    T_DATE = "T_DATE",
    T_GLOB = "T_GLOB",
    T_CLOSE_PARENTHESIS = "T_CLOSE_PARENTHESIS",
    T_OPEN_PARENTHESIS = "T_OPEN_PARENTHESIS",
    T_COMMA = "T_COMMA",
    T_AMPERSAND = "T_AMPERSAND",
    T_VERTICAL_BAR = "T_VERTICAL_BAR",
    T_PLUS = "T_PLUS",
    T_MINUS = "T_MINUS",
    T_COLON = "T_COLON",
    T_TYPE = "T_TYPE",
    T_OPERATOR = "T_OPERATOR",
    T_NULL = "T_NULL",
    T_EMPTY = "T_EMPTY",
    T_TRUE = "T_TRUE",
    T_FALSE = "T_FALSE"
}
export default class Token {
    readonly type: TokenTypeNameMap;
    readonly value: string;
    readonly start: number;
    readonly end: number;
    constructor(type: TokenTypeNameMap, value: string, start: number, end: number);
    test(type: TokenTypeNameMap | TokenTypeNameMap[], value?: string | string[]): boolean;
    readonly name: string;
    toString(): string;
}
